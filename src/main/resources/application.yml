spring:
  # app 이름
  application:
    name: demo
  # 오라클 연동
  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    url: jdbc:oracle:thin:@localhost:1521/xe
    username: c##product
    password: product1234
  # SQL 스크립트 자동 실행 설정
  sql:
    init:
      mode: always
      schema-locations: classpath:sql/products.sql
      continue-on-error: true
  # elasticsearch 연동
  elasticsearch:
    uris: localhost:9200
    username: elastic
    password: admin1234
  #ai
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
  # jpa:
  #   hibernate:
  #     # 개발 환경 (update 또는 create):
  #     #   Oracle 21c 개발 환경에서는 엔티티 변경 시 스키마 자동 업데이트를 위해 update를 자주 사용
  #     #   데이터베이스를 완전히 초기화하고 싶다면 create를 사용
  #     # 운영 환경 (none 또는 validate):
  #     #   Oracle 21c 운영 환경에서는 ddl-auto를 none으로 설정하여 Hibernate가 스키마를 건드리지 말기
  #     ddl-auto: update
  #     #      show-sql: true
  #     properties:
  #       hibernate:
  #         format_sql: true
  #         # Oracle 21c를 위한 Hibernate Dialect
  #         dialect: org.hibernate.dialect.OracleDialect

# 웹서버 포트
server:
  port: 9082
#서버 세션 타임아웃 설정
#기본은 1800(30분), 최소값 60(1분)
  servlet:
    session:
      timeout: 60
#클라이언트의 세션아이디를 서버가 받는 방식
#1. 클라이언트의 쿠키정보를 읽어 요청할때마다 요청메세지 헤더에 세션아이디를 취득
#2. 클라이언트의 쿼리스트링을 읽어 세션아이디를 취득
      tracking-mode: cookie

# 로그레벨
# trace > debug > info > warn > error > fatal
logging:
  level:
    org.springframework.jdbc: DEBUG     #JDBCTemplate sql log
    org.hibernate.SQL: DEBUG    # SQL 확인
    org.hibernate.type: TRACE   # SQL 파라미터확인
    # Elasticsearch 실제 쿼리 전송 로깅 (핵심 설정)
    org.elasticsearch.client.RestClient: DEBUG    # 실제 HTTP 요청/응답 로깅
    org.apache.http.wire: DEBUG                  # HTTP 요청/응답 본문 로깅

